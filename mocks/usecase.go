// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/task.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Batyr2024/todoGolang/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockinterfaceUseCase is a mock of interfaceUseCase interface.
type MockinterfaceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockinterfaceUseCaseMockRecorder
}

// MockinterfaceUseCaseMockRecorder is the mock recorder for MockinterfaceUseCase.
type MockinterfaceUseCaseMockRecorder struct {
	mock *MockinterfaceUseCase
}

// NewMockinterfaceUseCase creates a new mock instance.
func NewMockinterfaceUseCase(ctrl *gomock.Controller) *MockinterfaceUseCase {
	mock := &MockinterfaceUseCase{ctrl: ctrl}
	mock.recorder = &MockinterfaceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinterfaceUseCase) EXPECT() *MockinterfaceUseCaseMockRecorder {
	return m.recorder
}

// ChangeCheckedAll mocks base method.
func (m *MockinterfaceUseCase) ChangeCheckedAll(ctx context.Context, checked bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCheckedAll", ctx, checked)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeCheckedAll indicates an expected call of ChangeCheckedAll.
func (mr *MockinterfaceUseCaseMockRecorder) ChangeCheckedAll(ctx, checked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCheckedAll", reflect.TypeOf((*MockinterfaceUseCase)(nil).ChangeCheckedAll), ctx, checked)
}

// ChangeCheckedByID mocks base method.
func (m *MockinterfaceUseCase) ChangeCheckedByID(ctx context.Context, id int, checked bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCheckedByID", ctx, id, checked)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeCheckedByID indicates an expected call of ChangeCheckedByID.
func (mr *MockinterfaceUseCaseMockRecorder) ChangeCheckedByID(ctx, id, checked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCheckedByID", reflect.TypeOf((*MockinterfaceUseCase)(nil).ChangeCheckedByID), ctx, id, checked)
}

// ChangeText mocks base method.
func (m *MockinterfaceUseCase) ChangeText(ctx context.Context, id int, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeText", ctx, id, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeText indicates an expected call of ChangeText.
func (mr *MockinterfaceUseCaseMockRecorder) ChangeText(ctx, id, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeText", reflect.TypeOf((*MockinterfaceUseCase)(nil).ChangeText), ctx, id, text)
}

// Create mocks base method.
func (m *MockinterfaceUseCase) Create(ctx context.Context, task domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockinterfaceUseCaseMockRecorder) Create(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockinterfaceUseCase)(nil).Create), ctx, task)
}

// DeleteAll mocks base method.
func (m *MockinterfaceUseCase) DeleteAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockinterfaceUseCaseMockRecorder) DeleteAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockinterfaceUseCase)(nil).DeleteAll), ctx)
}

// DeleteByID mocks base method.
func (m *MockinterfaceUseCase) DeleteByID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockinterfaceUseCaseMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockinterfaceUseCase)(nil).DeleteByID), ctx, id)
}

// FindAll mocks base method.
func (m *MockinterfaceUseCase) FindAll(ctx context.Context) ([]*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockinterfaceUseCaseMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockinterfaceUseCase)(nil).FindAll), ctx)
}
