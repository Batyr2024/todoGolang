
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package sqlc

import (
	"context"
	. "github.com/Batyr2024/todoGolang/domain"
)

const changeCheckedAll = `-- name: ChangeCheckedAll :many
UPDATE tasks
    set checked=$1
RETURNING  1
`

type ChangeCheckedAllParams struct {
	Checked *bool `db:"checked" json:"checked"`
}

func (q *Queries) ChangeCheckedAll(ctx context.Context, arg *ChangeCheckedAllParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, changeCheckedAll, arg.Checked)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var column_1 int32
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const changeCheckedByID = `-- name: ChangeCheckedByID :one
UPDATE  tasks
    SET checked=$2
WHERE id=$1
RETURNING  id, text, checked
`

type ChangeCheckedByIDParams struct {
	ID      int32 `db:"id" json:"id"`
	Checked *bool `db:"checked" json:"checked"`
}

func (q *Queries) ChangeCheckedByID(ctx context.Context, arg *ChangeCheckedByIDParams) (*Task, error) {
	row := q.db.QueryRow(ctx, changeCheckedByID, arg.ID, arg.Checked)
	var i Task
	err := row.Scan(&i.ID, &i.Text, &i.Checked)
	return &i, err
}

const changeTextByID = `-- name: ChangeTextByID :one
UPDATE  tasks
    SET text=$2,
        checked=false
WHERE id=$1
RETURNING  id, text, checked
`

type ChangeTextByIDParams struct {
	ID   int32  `db:"id" json:"id"`
	Text string `db:"text" json:"text"`
}

func (q *Queries) ChangeTextByID(ctx context.Context, arg *ChangeTextByIDParams) (*Task, error) {
	row := q.db.QueryRow(ctx, changeTextByID, arg.ID, arg.Text)
	var i Task
	err := row.Scan(&i.ID, &i.Text, &i.Checked)
	return &i, err
}

const create = `-- name: Create :one
INSERT INTO tasks (
    text
)VALUES (
         $1
        )RETURNING id, text, checked
`

type CreateParams struct {
	Text string `db:"text" json:"text"`
}

func (q *Queries) Create(ctx context.Context, arg *CreateParams) (*Task, error) {
	row := q.db.QueryRow(ctx, create, arg.Text)
	var i Task
	err := row.Scan(&i.ID, &i.Text, &i.Checked)
	return &i, err
}

const deleteAll = `-- name: DeleteAll :many
DELETE FROM tasks
WHERE checked=true
RETURNING  1
`

func (q *Queries) DeleteAll(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, deleteAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var column_1 int32
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteByID = `-- name: DeleteByID :one
DELETE FROM tasks
WHERE id=$1
RETURNING  id, text, checked
`

type DeleteByIDParams struct {
	ID int32 `db:"id" json:"id"`
}

func (q *Queries) DeleteByID(ctx context.Context, arg *DeleteByIDParams) (*Task, error) {
	row := q.db.QueryRow(ctx, deleteByID, arg.ID)
	var i Task
	err := row.Scan(&i.ID, &i.Text, &i.Checked)
	return &i, err
}

const getAll = `-- name: GetAll :many
SELECT id, text, checked FROM tasks
ORDER BY id ASC;
`

func (q *Queries) GetAll(ctx context.Context) ([]*Task, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(&i.ID, &i.Text, &i.Checked); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
